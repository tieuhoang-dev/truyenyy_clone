package config

import (
	"context"
	"fmt"
	"log"
	"os"
	"time"

	"github.com/joho/godotenv"
	"go.mongodb.org/mongo-driver/mongo"
	"go.mongodb.org/mongo-driver/mongo/options"
)

var MongoClient *mongo.Client
var MongoDB *mongo.Database

func LoadEnv() {
	dir, err := os.Getwd()
	if err != nil {
		log.Fatal("‚ùå Kh√¥ng th·ªÉ l·∫•y th∆∞ m·ª•c hi·ªán t·∫°i:", err)
	}
	fmt.Println("üìÇ ƒêang ch·∫°y t·∫°i th∆∞ m·ª•c:", dir)

	err = godotenv.Load()
	if err != nil {
		log.Fatal("‚ùå Kh√¥ng th·ªÉ load file .env:", err)
	}
	fmt.Println("‚úÖ ƒê√£ load file .env")
}

func ConnectDB() {
	uri := os.Getenv("MONGO_URI")
	dbName := os.Getenv("DB_NAME")

	// T·∫°o context KH√îNG c√≥ timeout, v√¨ client c·∫ßn s·ªëng su·ªët runtime
	ctx := context.Background()

	// K·∫øt n·ªëi MongoDB
	client, err := mongo.Connect(ctx, options.Client().ApplyURI(uri))
	if err != nil {
		log.Fatal("‚ùå L·ªói k·∫øt n·ªëi MongoDB:", err)
	}

	// Ki·ªÉm tra k·∫øt n·ªëi
	ctxPing, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()

	err = client.Ping(ctxPing, nil)
	if err != nil {
		log.Fatal("‚ùå Kh√¥ng th·ªÉ ping MongoDB:", err)
	}

	MongoClient = client
	MongoDB = client.Database(dbName)
	log.Println("‚úÖ ƒê√£ k·∫øt n·ªëi MongoDB th√†nh c√¥ng!")
}
